[CRAB]

jobtype = cmssw
scheduler = glite
use_server = 1

[CMSSW]

### The ParameterSet you want to use
pset=copy_cfg.py
#pset=CMSSW_428_MC_cfg.py
lumi_mask=/afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions12/8TeV/Prompt/Cert_190456-190688_8TeV_PromptReco_Collisions12_JSON.txt

### Splitting parameters
#total_number_of_events = 10000
#events_per_job = 10000
#runselection=170826-170826
total_number_of_lumis =-1
#total_number_of_lumis =50
lumis_per_job = 30
#number_of_jobs = 5



### The output files (comma separated list)
output_file = reco_copy.root

[USER]
email=sang.eun.lee@cern.ch
#return_data = 0
copy_data=1
#storage_element = T2_IT_Bari
storage_element=srm-cms.cern.ch
storage_path=/srm/managerv2?SFN=/castor/cern.ch
user_remote_dir=/user/s/salee/RealData

### OUTPUT files Management
##  output back into UI
return_data = 0

### OUTPUT files INTO A SE
#copy_data = 1

[GRID]
#
## RB/WMS management:
#rb = CERN
#proxy_server = myproxy.cern.ch
##  Black and White Lists management:
## By Storage

se_black_list =	T0,T1
#se_black_list =	T2_US_Purdue
#se_white_list =

## By ComputingElement
ce_black_list =	red.unl.edu, red-gw1.unl.edu, red-gw2.unl.edu, ce01.cmsaf.mit.edu,cit-gatekeeper.ultralight.org
#ce_white_list = wisc.edu, lnl.infn.it

[CONDORG]

# Set this to condor to override the batchsystem defined in gridcat.
#batchsystem = condor

# Specify addition condor_g requirments
# use this requirment to run on a cms dedicated hardare
# globus_rsl = (condor_submit=(requirements 'ClusterName == \"CMS\" && (Arch == \"INTEL\" || Arch == \"X86_64\")'))
# use this requirement to run on the new hardware
#globus_rsl = (condor_submit=(requirements 'regexp(\"cms-*\",Machine)'))

